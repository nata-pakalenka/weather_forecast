# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Components/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Components\Geocoding\RestApiClient:
        arguments:
            $client: '@httplug.client.google_geocoder'

    app_cache_redis_provider:
        class: Client\Predis
        factory: ['Symfony\Component\Cache\Adapter\RedisAdapter', 'createConnection']
        arguments:
            - "%env(REDIS_URL)%"
            - { retry_interval: 2, timeout: 10 }

    App\Components\WeatherForecast\Cache\WeatherDataRedisCacheStorage:
        arguments:
            $credisClient: '@app_cache_redis_provider'

    App\Components\WeatherForecast\Provider\WeatherForecastProcessorProvider:
        arguments:
            $processors:
                - '@App\Components\WeatherForecast\Provider\OpenWeather\OpenWeatherProcessor'
                - '@App\Components\WeatherForecast\Provider\WeatherBit\WeatherBitProcessor'

    weather_forecast.config.open_weather:
        class: App\Components\WeatherForecast\Factory\ConfigFactory
        arguments:
            $queryParametersFactory: '@App\Components\WeatherForecast\Provider\OpenWeather\Factory\QueryParametersFactory'
    weather_forecast.config.weather_bit:
        class: App\Components\WeatherForecast\Factory\ConfigFactory
        arguments:
            $queryParametersFactory: '@App\Components\WeatherForecast\Provider\WeatherBit\Factory\QueryParametersFactory'

    App\Components\WeatherForecast\Provider\OpenWeather\Factory\QueryParametersFactory: ~
    App\Components\WeatherForecast\Provider\WeatherBit\Factory\QueryParametersFactory: ~

    App\Components\WeatherForecast\Provider\OpenWeather\Builder\WeatherDataBuilder: ~
    App\Components\WeatherForecast\Provider\WeatherBit\Builder\WeatherDataBuilder: ~

    weather_forecast.client.open_weather:
        class: App\Components\WeatherForecast\Http\RestApiClient
        arguments:
            $client: '@httplug.client.open_weather'

    weather_forecast.client.weather_bit:
        class: App\Components\WeatherForecast\Provider\WeatherBit\Http\RestApiClient
        arguments:
            $client: '@httplug.client.weather_bit'

    App\Components\WeatherForecast\Provider\OpenWeather\OpenWeatherProcessor:
        arguments:
            $client: '@weather_forecast.client.open_weather'
            $configFactory: '@weather_forecast.config.open_weather'
            $weatherDataBuilder: '@App\Components\WeatherForecast\Provider\OpenWeather\Builder\WeatherDataBuilder'

    App\Components\WeatherForecast\Provider\WeatherBit\WeatherBitProcessor:
        arguments:
            $client: '@weather_forecast.client.weather_bit'
            $configFactory: '@weather_forecast.config.weather_bit'
            $weatherDataBuilder: '@App\Components\WeatherForecast\Provider\WeatherBit\Builder\WeatherDataBuilder'

    App\Components\WeatherForecast\Builder\AverageWeatherDataBuilder: ~
